
SPI-SLave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  000002f0  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000103  00800218  00800218  0000039c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c24  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e38  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e09  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000698  00000000  00000000  00003e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eca  00000000  00000000  000044bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bff  00000000  00000000  00005386  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00006f85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	82 c0       	rjmp	.+260    	; 0x166 <__vector_24>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ef       	ldi	r30, 0xF0	; 240
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 31       	cpi	r26, 0x18	; 24
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a8 e1       	ldi	r26, 0x18	; 24
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 31       	cpi	r26, 0x1B	; 27
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	8a d0       	rcall	.+276    	; 0x234 <main>
 120:	e5 c0       	rjmp	.+458    	; 0x2ec <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z13GB_UART_Init0v>:
	{
		GB_SL_SPI0_send_byte(gb_c);
	}
	//SL_SPI0_send_byte('\0');

}
 124:	87 e6       	ldi	r24, 0x67	; 103
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 12c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 130:	88 e9       	ldi	r24, 0x98	; 152
 132:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 136:	08 95       	ret

00000138 <_Z15GB_UART_TxChar0j>:
 138:	e0 ec       	ldi	r30, 0xC0	; 192
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	90 81       	ld	r25, Z
 13e:	95 ff       	sbrs	r25, 5
 140:	fd cf       	rjmp	.-6      	; 0x13c <_Z15GB_UART_TxChar0j+0x4>
 142:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 146:	08 95       	ret

00000148 <_Z15GB_printString0PKc>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	88 81       	ld	r24, Y
 150:	88 23       	and	r24, r24
 152:	31 f0       	breq	.+12     	; 0x160 <_Z15GB_printString0PKc+0x18>
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ef df       	rcall	.-34     	; 0x138 <_Z15GB_UART_TxChar0j>
 15a:	89 91       	ld	r24, Y+
 15c:	81 11       	cpse	r24, r1
 15e:	fb cf       	rjmp	.-10     	; 0x156 <_Z15GB_printString0PKc+0xe>
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <__vector_24>:
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	0b b6       	in	r0, 0x3b	; 59
 172:	0f 92       	push	r0
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
 17c:	9e b5       	in	r25, 0x2e	; 46
 17e:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <__data_end>
 182:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <gb_RECV_Wr_Index_SPI0>
 186:	e8 2f       	mov	r30, r24
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	e4 5e       	subi	r30, 0xE4	; 228
 18c:	fd 4f       	sbci	r31, 0xFD	; 253
 18e:	90 83       	st	Z, r25
 190:	8f 5f       	subi	r24, 0xFF	; 255
 192:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <gb_RECV_Wr_Index_SPI0>
 196:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <gb_RECV_Counter_SPI0>
 19a:	8f 5f       	subi	r24, 0xFF	; 255
 19c:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <gb_RECV_Counter_SPI0>
 1a0:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <gb_RECV_No_of_bytes_SPI0>
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0b be       	out	0x3b, r0	; 59
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <_Z21GB_SL_SPI0_init_slavev>:
 1ba:	88 e0       	ldi	r24, 0x08	; 8
 1bc:	84 b9       	out	0x04, r24	; 4
 1be:	8c b5       	in	r24, 0x2c	; 44
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	8c bd       	out	0x2c, r24	; 44
 1c4:	8c b5       	in	r24, 0x2c	; 44
 1c6:	8c 60       	ori	r24, 0x0C	; 12
 1c8:	8c bd       	out	0x2c, r24	; 44
 1ca:	08 95       	ret

000001cc <_Z28GB_SL_SPI0_disable_interruptv>:
 1cc:	8c b5       	in	r24, 0x2c	; 44
 1ce:	8f 77       	andi	r24, 0x7F	; 127
 1d0:	8c bd       	out	0x2c, r24	; 44
 1d2:	08 95       	ret

000001d4 <_Z20GB_SL_SPI0_read_bytev>:
/* receives one byte
E.G: char ch = SL_SPI0_read_byte()
*/
uint8_t GB_SL_SPI0_read_byte()
{
	while(!(SPSR & (1<<SPIF) ));                  //Wait until transmission complete
 1d4:	0d b4       	in	r0, 0x2d	; 45
 1d6:	07 fe       	sbrs	r0, 7
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <_Z20GB_SL_SPI0_read_bytev>
	return(SPDR);                                 //Return received data
 1da:	8e b5       	in	r24, 0x2e	; 46
}
 1dc:	08 95       	ret

000001de <_Z21GB_SL_SPI0_read_blockPch>:
/*
Read the incoming data till size bytes
E.G: SL_SPIO_read_block(ch,15);
*/
void GB_SL_SPI0_read_block(char gb_block[], uint8_t gb_size)
{
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	1f 92       	push	r1
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	7c 01       	movw	r14, r24
 1f0:	16 2f       	mov	r17, r22
	memset(gb_block, '\0', gb_size);
 1f2:	46 2f       	mov	r20, r22
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	71 d0       	rcall	.+226    	; 0x2de <memset>
	uint8_t gb_i=0;
	volatile uint8_t gb_spi_recv_char=0;
 1fc:	19 82       	std	Y+1, r1	; 0x01

	while ((gb_size--)!= 0) {
 1fe:	11 23       	and	r17, r17
 200:	91 f0       	breq	.+36     	; 0x226 <_Z21GB_SL_SPI0_read_blockPch+0x48>
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	01 c0       	rjmp	.+2      	; 0x208 <_Z21GB_SL_SPI0_read_blockPch+0x2a>
	gb_spi_data_reg = 0;
	while (!(SPSR & (1 << SPIF)));
	gb_spi_recv_char = gb_spi_data_reg;
	gb_block[gb_i++] = gb_spi_recv_char;
 206:	89 2f       	mov	r24, r25
	memset(gb_block, '\0', gb_size);
	uint8_t gb_i=0;
	volatile uint8_t gb_spi_recv_char=0;

	while ((gb_size--)!= 0) {
	gb_spi_data_reg = 0;
 208:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1 << SPIF)));
 20a:	0d b4       	in	r0, 0x2d	; 45
 20c:	07 fe       	sbrs	r0, 7
 20e:	fd cf       	rjmp	.-6      	; 0x20a <_Z21GB_SL_SPI0_read_blockPch+0x2c>
	gb_spi_recv_char = gb_spi_data_reg;
 210:	9e b5       	in	r25, 0x2e	; 46
 212:	99 83       	std	Y+1, r25	; 0x01
	gb_block[gb_i++] = gb_spi_recv_char;
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	98 0f       	add	r25, r24
 218:	29 81       	ldd	r18, Y+1	; 0x01
 21a:	f7 01       	movw	r30, r14
 21c:	e8 0f       	add	r30, r24
 21e:	f1 1d       	adc	r31, r1
 220:	20 83       	st	Z, r18
{
	memset(gb_block, '\0', gb_size);
	uint8_t gb_i=0;
	volatile uint8_t gb_spi_recv_char=0;

	while ((gb_size--)!= 0) {
 222:	19 13       	cpse	r17, r25
 224:	f0 cf       	rjmp	.-32     	; 0x206 <_Z21GB_SL_SPI0_read_blockPch+0x28>
	while (!(SPSR & (1 << SPIF)));
	gb_spi_recv_char = gb_spi_data_reg;
	gb_block[gb_i++] = gb_spi_recv_char;

	 }
 226:	0f 90       	pop	r0
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	08 95       	ret

00000234 <main>:
#include "GB_uarts.h"
#include "GB_SPI_slave.h"


int main(void)
{     
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	ec 97       	sbiw	r28, 0x3c	; 60
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
	GB_UART_Init0();
 248:	6d df       	rcall	.-294    	; 0x124 <_Z13GB_UART_Init0v>
	GB_SL_SPI0_init_slave();                             //Initialize slave SPI
 24a:	b7 df       	rcall	.-146    	; 0x1ba <_Z21GB_SL_SPI0_init_slavev>
	GB_SL_SPI0_disable_interrupt();
 24c:	bf df       	rcall	.-130    	; 0x1cc <_Z28GB_SL_SPI0_disable_interruptv>
 24e:	8e e1       	ldi	r24, 0x1E	; 30
	char gb_ch[30],gb_bh[30];
	memset(gb_ch, '\0', 30);
 250:	fe 01       	movw	r30, r28
 252:	31 96       	adiw	r30, 0x01	; 1
 254:	df 01       	movw	r26, r30
 256:	98 2f       	mov	r25, r24
 258:	1d 92       	st	X+, r1
 25a:	9a 95       	dec	r25
 25c:	e9 f7       	brne	.-6      	; 0x258 <main+0x24>
 25e:	7e 96       	adiw	r30, 0x1e	; 30
	memset(gb_bh, '\0', 30);
 260:	df 01       	movw	r26, r30
 262:	1d 92       	st	X+, r1
 264:	8a 95       	dec	r24
 266:	e9 f7       	brne	.-6      	; 0x262 <main+0x2e>
 268:	78 94       	sei
	sei();
	GB_printString0("SPI-Slave-receiving\n");
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	92 e0       	ldi	r25, 0x02	; 2
 26e:	6c df       	rcall	.-296    	; 0x148 <_Z15GB_printString0PKc>
 270:	fe 01       	movw	r30, r28
	int8_t gb_c=0;
	while(1)
	{
       	   _delay_us(100);
       	   GB_SL_SPI0_read_block(gb_ch,19);
 272:	31 96       	adiw	r30, 0x01	; 1
 274:	7f 01       	movw	r14, r30
 276:	8e 01       	movw	r16, r28
       	   GB_SL_SPI0_read_block(gb_bh,11);
 278:	01 5e       	subi	r16, 0xE1	; 225
 27a:	1f 4f       	sbci	r17, 0xFF	; 255
 27c:	0f 2e       	mov	r0, r31
       	  GB_printString0(gb_ch);
       	   GB_printString0("\n");
       	   GB_printString0(gb_bh);
       	   GB_printString0("\n");
       	   
       	   memset(gb_ch, '\0', 30);
 27e:	fe e1       	ldi	r31, 0x1E	; 30
 280:	df 2e       	mov	r13, r31
 282:	f0 2d       	mov	r31, r0
 284:	8f e8       	ldi	r24, 0x8F	; 143
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <main+0x54>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <main+0x5a>
 28e:	00 00       	nop
	GB_printString0("SPI-Slave-receiving\n");
	int8_t gb_c=0;
	while(1)
	{
       	   _delay_us(100);
       	   GB_SL_SPI0_read_block(gb_ch,19);
 290:	63 e1       	ldi	r22, 0x13	; 19
 292:	c7 01       	movw	r24, r14
       	   GB_SL_SPI0_read_block(gb_bh,11);
 294:	a4 df       	rcall	.-184    	; 0x1de <_Z21GB_SL_SPI0_read_blockPch>
 296:	6b e0       	ldi	r22, 0x0B	; 11
 298:	c8 01       	movw	r24, r16
       	   GB_UART_TxChar0(GB_SL_SPI0_read_byte());
 29a:	a1 df       	rcall	.-190    	; 0x1de <_Z21GB_SL_SPI0_read_blockPch>
 29c:	9b df       	rcall	.-202    	; 0x1d4 <_Z20GB_SL_SPI0_read_bytev>
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	4b df       	rcall	.-362    	; 0x138 <_Z15GB_UART_TxChar0j>
       	   
       	   
       	  GB_printString0("\n");
 2a2:	86 e1       	ldi	r24, 0x16	; 22
 2a4:	92 e0       	ldi	r25, 0x02	; 2
 2a6:	50 df       	rcall	.-352    	; 0x148 <_Z15GB_printString0PKc>
       	  GB_printString0(gb_ch);
 2a8:	c7 01       	movw	r24, r14
 2aa:	4e df       	rcall	.-356    	; 0x148 <_Z15GB_printString0PKc>
       	   GB_printString0("\n");
 2ac:	86 e1       	ldi	r24, 0x16	; 22
 2ae:	92 e0       	ldi	r25, 0x02	; 2
 2b0:	4b df       	rcall	.-362    	; 0x148 <_Z15GB_printString0PKc>
 2b2:	c8 01       	movw	r24, r16
       	   GB_printString0(gb_bh);
 2b4:	49 df       	rcall	.-366    	; 0x148 <_Z15GB_printString0PKc>
 2b6:	86 e1       	ldi	r24, 0x16	; 22
 2b8:	92 e0       	ldi	r25, 0x02	; 2
       	   GB_printString0("\n");
 2ba:	46 df       	rcall	.-372    	; 0x148 <_Z15GB_printString0PKc>
 2bc:	d7 01       	movw	r26, r14
 2be:	ed 2d       	mov	r30, r13
 2c0:	1d 92       	st	X+, r1
       	   
       	   memset(gb_ch, '\0', 30);
 2c2:	ea 95       	dec	r30
 2c4:	e9 f7       	brne	.-6      	; 0x2c0 <main+0x8c>
 2c6:	d8 01       	movw	r26, r16
 2c8:	ed 2d       	mov	r30, r13
 2ca:	1d 92       	st	X+, r1
       	   memset(gb_bh, '\0', 30);
 2cc:	ea 95       	dec	r30
 2ce:	e9 f7       	brne	.-6      	; 0x2ca <main+0x96>
 2d0:	8f e8       	ldi	r24, 0x8F	; 143
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <main+0xa0>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <main+0xa6>
 2da:	00 00       	nop
 2dc:	d3 cf       	rjmp	.-90     	; 0x284 <main+0x50>

000002de <memset>:
 2de:	dc 01       	movw	r26, r24
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <memset+0x6>
 2e2:	6d 93       	st	X+, r22
 2e4:	41 50       	subi	r20, 0x01	; 1
 2e6:	50 40       	sbci	r21, 0x00	; 0
 2e8:	e0 f7       	brcc	.-8      	; 0x2e2 <memset+0x4>
 2ea:	08 95       	ret

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
