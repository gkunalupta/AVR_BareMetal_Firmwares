
SPI-master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800200  00000236  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000236  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a94  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e8d  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ce3  00000000  00000000  00002e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000558  00000000  00000000  00003afc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000cf4  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001645  00000000  00000000  00004d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  0000638d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e3       	ldi	r30, 0x36	; 54
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 34       	cpi	r26, 0x4C	; 76
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e4       	ldi	r26, 0x4C	; 76
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 34       	cpi	r26, 0x4C	; 76
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	49 d0       	rcall	.+146    	; 0x1b2 <main>
 120:	88 c0       	rjmp	.+272    	; 0x232 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z10UART_Init0v>:
	while (!(SPSR & (1 << SPIF)));
	spi_recv_char= spi_data_reg;
	block[i++] = spi_recv_char;
	 }
	 spi_port |= (1<<SS);
}
 124:	87 e6       	ldi	r24, 0x67	; 103
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 12c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 130:	88 e9       	ldi	r24, 0x98	; 152
 132:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 136:	08 95       	ret

00000138 <_Z12UART_TxChar0j>:
 138:	e0 ec       	ldi	r30, 0xC0	; 192
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	90 81       	ld	r25, Z
 13e:	95 ff       	sbrs	r25, 5
 140:	fd cf       	rjmp	.-6      	; 0x13c <_Z12UART_TxChar0j+0x4>
 142:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 146:	08 95       	ret

00000148 <_Z12printString0PKc>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	88 81       	ld	r24, Y
 150:	88 23       	and	r24, r24
 152:	31 f0       	breq	.+12     	; 0x160 <_Z12printString0PKc+0x18>
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ef df       	rcall	.-34     	; 0x138 <_Z12UART_TxChar0j>
 15a:	89 91       	ld	r24, Y+
 15c:	81 11       	cpse	r24, r1
 15e:	fb cf       	rjmp	.-10     	; 0x156 <_Z12printString0PKc+0xe>
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <_Z19MA_SPI0_init_masterv>:
 166:	84 b1       	in	r24, 0x04	; 4
 168:	87 60       	ori	r24, 0x07	; 7
 16a:	84 b9       	out	0x04, r24	; 4
 16c:	8c b5       	in	r24, 0x2c	; 44
 16e:	81 65       	ori	r24, 0x51	; 81
 170:	8c bd       	out	0x2c, r24	; 44
 172:	8c b5       	in	r24, 0x2c	; 44
 174:	80 62       	ori	r24, 0x20	; 32
 176:	8c bd       	out	0x2c, r24	; 44
 178:	8c b5       	in	r24, 0x2c	; 44
 17a:	83 7f       	andi	r24, 0xF3	; 243
 17c:	8c bd       	out	0x2c, r24	; 44
 17e:	08 95       	ret

00000180 <_Z25MA_SPI0_disable_interruptv>:
 180:	8c b5       	in	r24, 0x2c	; 44
 182:	8f 77       	andi	r24, 0x7F	; 127
 184:	8c bd       	out	0x2c, r24	; 44
 186:	08 95       	ret

00000188 <_Z17MA_SPI0_send_byteh>:
 188:	28 98       	cbi	0x05, 0	; 5
 18a:	8e bd       	out	0x2e, r24	; 46
 18c:	0d b4       	in	r0, 0x2d	; 45
 18e:	07 fe       	sbrs	r0, 7
 190:	fd cf       	rjmp	.-6      	; 0x18c <_Z17MA_SPI0_send_byteh+0x4>
 192:	28 9a       	sbi	0x05, 0	; 5
 194:	08 95       	ret

00000196 <_Z19MA_SPI0_send_stringPKc>:
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
 19c:	88 81       	ld	r24, Y
 19e:	88 23       	and	r24, r24
 1a0:	29 f0       	breq	.+10     	; 0x1ac <_Z19MA_SPI0_send_stringPKc+0x16>
 1a2:	21 96       	adiw	r28, 0x01	; 1
 1a4:	f1 df       	rcall	.-30     	; 0x188 <_Z17MA_SPI0_send_byteh>
 1a6:	89 91       	ld	r24, Y+
 1a8:	81 11       	cpse	r24, r1
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <_Z19MA_SPI0_send_stringPKc+0xe>
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <main>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "SPI_master.h"

int main(void)
{   
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	ec 97       	sbiw	r28, 0x3c	; 60
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61
	UART_Init0();
 1c6:	ae df       	rcall	.-164    	; 0x124 <_Z10UART_Init0v>
	MA_SPI0_init_master();                     //Initialize SPI Master
 1c8:	ce df       	rcall	.-100    	; 0x166 <_Z19MA_SPI0_init_masterv>
	MA_SPI0_disable_interrupt();
 1ca:	da df       	rcall	.-76     	; 0x180 <_Z25MA_SPI0_disable_interruptv>
 1cc:	8e e1       	ldi	r24, 0x1E	; 30
    char ch[30],bh[30];
	memset(ch, '\0', 30);
 1ce:	fe 01       	movw	r30, r28
 1d0:	31 96       	adiw	r30, 0x01	; 1
 1d2:	df 01       	movw	r26, r30
 1d4:	28 2f       	mov	r18, r24
 1d6:	1d 92       	st	X+, r1
 1d8:	2a 95       	dec	r18
 1da:	e9 f7       	brne	.-6      	; 0x1d6 <main+0x24>
 1dc:	7e 96       	adiw	r30, 0x1e	; 30
	memset(bh, '\0', 30);
 1de:	df 01       	movw	r26, r30
 1e0:	1d 92       	st	X+, r1
 1e2:	8a 95       	dec	r24
 1e4:	e9 f7       	brne	.-6      	; 0x1e0 <main+0x2e>
	printString0("SPI-master-sending\n");
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	92 e0       	ldi	r25, 0x02	; 2
 1ea:	ae df       	rcall	.-164    	; 0x148 <_Z12printString0PKc>
	sei();
 1ec:	78 94       	sei
		  
	
		  if(c<1)
		  {

			  printString0("SPI-master-Sending\n");
 1ee:	87 e1       	ldi	r24, 0x17	; 23
 1f0:	92 e0       	ldi	r25, 0x02	; 2
 1f2:	aa df       	rcall	.-172    	; 0x148 <_Z12printString0PKc>
			  MA_SPI0_send_string("Subscribe Gettobyte");
 1f4:	8b e2       	ldi	r24, 0x2B	; 43
 1f6:	92 e0       	ldi	r25, 0x02	; 2
			  MA_SPI0_send_string("Kunal Gupta");
 1f8:	ce df       	rcall	.-100    	; 0x196 <_Z19MA_SPI0_send_stringPKc>
 1fa:	8f e3       	ldi	r24, 0x3F	; 63
 1fc:	92 e0       	ldi	r25, 0x02	; 2
			  MA_SPI0_send_byte('p');
 1fe:	cb df       	rcall	.-106    	; 0x196 <_Z19MA_SPI0_send_stringPKc>
 200:	80 e7       	ldi	r24, 0x70	; 112
 202:	c2 df       	rcall	.-124    	; 0x188 <_Z17MA_SPI0_send_byteh>
			  printString0("\n");
 204:	89 e2       	ldi	r24, 0x29	; 41
 206:	92 e0       	ldi	r25, 0x02	; 2
 208:	9f df       	rcall	.-194    	; 0x148 <_Z12printString0PKc>
 20a:	bf ef       	ldi	r27, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	21 ee       	ldi	r18, 0xE1	; 225
 20e:	84 e0       	ldi	r24, 0x04	; 4
 210:	b1 50       	subi	r27, 0x01	; 1
 212:	20 40       	sbci	r18, 0x00	; 0
 214:	80 40       	sbci	r24, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <main+0x5e>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x68>
 21a:	00 00       	nop
 21c:	80 e0       	ldi	r24, 0x00	; 0
		  
		  
		  

   }
}
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	ec 96       	adiw	r28, 0x3c	; 60
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
