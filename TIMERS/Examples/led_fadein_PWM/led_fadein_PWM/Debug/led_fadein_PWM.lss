
led_fadein_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001801  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e43  00000000  00000000  00001bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b50  00000000  00000000  00002a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000053c  00000000  00000000  0000356c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b2b  00000000  00000000  00003aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016af  00000000  00000000  000045d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00005c82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ec       	ldi	r30, 0xCA	; 202
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 30       	cpi	r26, 0x00	; 0
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	52 c0       	rjmp	.+164    	; 0x1c6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
{
	
	/* Set up Timer1 (16bit) to give a pulse every 20ms */
	/* Use Fast PWM mode, counter max in ICR1 */
	/* 1) First select the waveform generation mode: Fast PWM,CTC,Phase PWM,Normal PWM*/
	TCCR4A |= (1 << WGM41);   
 124:	e0 ea       	ldi	r30, 0xA0	; 160
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42) | (1 << WGM43);
 12e:	a1 ea       	ldi	r26, 0xA1	; 161
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	8c 91       	ld	r24, X
 134:	88 61       	ori	r24, 0x18	; 24
 136:	8c 93       	st	X, r24
	/*2) Select the clock prescalor value for Timer Clock*/
	TCCR4B |= (1 << CS41);  //8 prescaling 
 138:	8c 91       	ld	r24, X
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	8c 93       	st	X, r24
	/*3) assign the TOP value */
	ICR4 = 40000;
 13e:	80 e4       	ldi	r24, 0x40	; 64
 140:	9c e9       	ldi	r25, 0x9C	; 156
 142:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7c00a7>
 146:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7c00a6>
	/*4)  Select the Compare output mode for particular PWM pin: inverting, non inverting*/
	TCCR4A |= (1 << COM4A1);  /* Direct output on PB7 / OC1C */
 14a:	80 81       	ld	r24, Z
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	80 83       	st	Z, r24
	/* 5) output the corresponding PWM pin*/
	DDRH |= (1 << (gb_PWM_pin));  /* set pin for output */
 150:	e1 e0       	ldi	r30, 0x01	; 1
 152:	f1 e0       	ldi	r31, 0x01	; 1
 154:	80 81       	ld	r24, Z
 156:	88 60       	ori	r24, 0x08	; 8
 158:	80 83       	st	Z, r24
}
void GB_duty_cycle(int gb_duty)
{
	OCR4A = 400 * gb_duty;
 15a:	e8 ea       	ldi	r30, 0xA8	; 168
 15c:	f0 e0       	ldi	r31, 0x00	; 0

#include "GB_timer_pwm.h"
#include "GB_uarts.h"

int main(void)
{
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	91 83       	std	Z+1, r25	; 0x01
 164:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	31 ee       	ldi	r19, 0xE1	; 225
 16a:	44 e0       	ldi	r20, 0x04	; 4
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	30 40       	sbci	r19, 0x00	; 0
 170:	40 40       	sbci	r20, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x48>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x52>
 176:	00 00       	nop
 178:	80 57       	subi	r24, 0x70	; 112
 17a:	9e 4f       	sbci	r25, 0xFE	; 254
		//OCR1C =2000;
		//duty_cycle(90);
		
		
		
		for(int gb_i=0;gb_i<100;gb_i++)
 17c:	80 34       	cpi	r24, 0x40	; 64
 17e:	2c e9       	ldi	r18, 0x9C	; 156
 180:	92 07       	cpc	r25, r18
 182:	79 f7       	brne	.-34     	; 0x162 <main+0x3e>
 184:	3f ef       	ldi	r19, 0xFF	; 255
 186:	49 e6       	ldi	r20, 0x69	; 105
 188:	28 e1       	ldi	r18, 0x18	; 24
 18a:	31 50       	subi	r19, 0x01	; 1
 18c:	40 40       	sbci	r20, 0x00	; 0
 18e:	20 40       	sbci	r18, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0x66>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x70>
 194:	00 00       	nop
 196:	91 83       	std	Z+1, r25	; 0x01
 198:	80 83       	st	Z, r24
 19a:	3f ef       	ldi	r19, 0xFF	; 255
 19c:	41 ee       	ldi	r20, 0xE1	; 225
 19e:	24 e0       	ldi	r18, 0x04	; 4
 1a0:	31 50       	subi	r19, 0x01	; 1
 1a2:	40 40       	sbci	r20, 0x00	; 0
 1a4:	20 40       	sbci	r18, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x7c>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x86>
 1aa:	00 00       	nop
 1ac:	80 59       	subi	r24, 0x90	; 144
 1ae:	91 40       	sbci	r25, 0x01	; 1
			 		{
				 		GB_duty_cycle(gb_i);
				 		_delay_ms(100);
			 		}
			 		_delay_ms(500);
			 		for(int gb_i=100;gb_i>0;gb_i--)
 1b0:	91 f7       	brne	.-28     	; 0x196 <main+0x72>
 1b2:	3f ef       	ldi	r19, 0xFF	; 255
 1b4:	49 e6       	ldi	r20, 0x69	; 105
 1b6:	88 e1       	ldi	r24, 0x18	; 24
 1b8:	31 50       	subi	r19, 0x01	; 1
 1ba:	40 40       	sbci	r20, 0x00	; 0
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x94>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x9e>
 1c2:	00 00       	nop
 1c4:	cc cf       	rjmp	.-104    	; 0x15e <main+0x3a>

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
