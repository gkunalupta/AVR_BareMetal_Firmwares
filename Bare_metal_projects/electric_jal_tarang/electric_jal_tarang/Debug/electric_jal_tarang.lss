
electric_jal_tarang.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800200  0000028c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001577  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000db5  00000000  00000000  00001a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000996  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d8  00000000  00000000  00003198  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000092e  00000000  00000000  00003570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000117c  00000000  00000000  00003e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  0000501a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e8       	ldi	r30, 0x8C	; 140
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 35       	cpi	r26, 0x52	; 82
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e5       	ldi	r26, 0x52	; 82
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 35       	cpi	r26, 0x52	; 82
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	4d d0       	rcall	.+154    	; 0x1ba <main>
 120:	b3 c0       	rjmp	.+358    	; 0x288 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z10UART_Init0v>:
		if (buf[ptr] != '0') break;
	}
	for(;ptr>=0;--ptr) {
		UART_TxChar3(buf[ptr]);
	}
 124:	87 e6       	ldi	r24, 0x67	; 103
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 12c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 130:	88 e9       	ldi	r24, 0x98	; 152
 132:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 136:	08 95       	ret

00000138 <_Z12UART_TxChar0j>:
 138:	e0 ec       	ldi	r30, 0xC0	; 192
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	90 81       	ld	r25, Z
 13e:	95 ff       	sbrs	r25, 5
 140:	fd cf       	rjmp	.-6      	; 0x13c <_Z12UART_TxChar0j+0x4>
 142:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 146:	08 95       	ret

00000148 <_Z12UART_RxChar0v>:
 148:	e0 ec       	ldi	r30, 0xC0	; 192
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	88 23       	and	r24, r24
 150:	ec f7       	brge	.-6      	; 0x14c <_Z12UART_RxChar0v+0x4>
 152:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 156:	08 95       	ret

00000158 <_Z12printString0PKc>:
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ec 01       	movw	r28, r24
 15e:	88 81       	ld	r24, Y
 160:	88 23       	and	r24, r24
 162:	31 f0       	breq	.+12     	; 0x170 <_Z12printString0PKc+0x18>
 164:	21 96       	adiw	r28, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	e7 df       	rcall	.-50     	; 0x138 <_Z12UART_TxChar0j>
 16a:	89 91       	ld	r24, Y+
 16c:	81 11       	cpse	r24, r1
 16e:	fb cf       	rjmp	.-10     	; 0x166 <_Z12printString0PKc+0xe>
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <_Z8playNotejj>:


void playNote(uint16_t period, uint16_t duration) {
	uint16_t elapsed;
	uint16_t i;
	for (elapsed = 0; elapsed < duration; elapsed += period) {
 176:	61 15       	cp	r22, r1
 178:	71 05       	cpc	r23, r1
 17a:	b9 f0       	breq	.+46     	; 0x1aa <_Z8playNotejj+0x34>
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	50 e0       	ldi	r21, 0x00	; 0
		/* For loop with variable delay selects the pitch */
		for (i = 0; i < period; i++) {
 180:	00 97       	sbiw	r24, 0x00	; 0
 182:	59 f0       	breq	.+22     	; 0x19a <_Z8playNotejj+0x24>
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	e5 e0       	ldi	r30, 0x05	; 5
 18a:	ea 95       	dec	r30
 18c:	f1 f7       	brne	.-4      	; 0x18a <_Z8playNotejj+0x14>
 18e:	00 00       	nop
 190:	2f 5f       	subi	r18, 0xFF	; 255
 192:	3f 4f       	sbci	r19, 0xFF	; 255
 194:	82 17       	cp	r24, r18
 196:	93 07       	cpc	r25, r19
 198:	b9 f7       	brne	.-18     	; 0x188 <_Z8playNotejj+0x12>
			_delay_us(1);
		}
		SPEAKER_PORT ^= (1 << SPEAKER);
 19a:	2b b1       	in	r18, 0x0b	; 11
 19c:	20 58       	subi	r18, 0x80	; 128
 19e:	2b b9       	out	0x0b, r18	; 11


void playNote(uint16_t period, uint16_t duration) {
	uint16_t elapsed;
	uint16_t i;
	for (elapsed = 0; elapsed < duration; elapsed += period) {
 1a0:	48 0f       	add	r20, r24
 1a2:	59 1f       	adc	r21, r25
 1a4:	46 17       	cp	r20, r22
 1a6:	57 07       	cpc	r21, r23
 1a8:	58 f3       	brcs	.-42     	; 0x180 <_Z8playNotejj+0xa>
 1aa:	08 95       	ret

000001ac <_Z4restj>:
 1ac:	25 e0       	ldi	r18, 0x05	; 5
 1ae:	2a 95       	dec	r18
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <_Z4restj+0x2>
 1b2:	00 00       	nop
		SPEAKER_PORT ^= (1 << SPEAKER);
	}
}

void rest(uint16_t duration) {
	do {
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	d1 f7       	brne	.-12     	; 0x1ac <_Z4restj>
		_delay_us(1);
	} while (--duration);
}// ------------- Function prototypes -------------- //
 1b8:	08 95       	ret

000001ba <main>:
#include "uarts.h"
#include "scale16.h"
#include "organ.h"
#define NOTE_DURATION     0xF000        /* determines long note length */

int main(void) {
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	e6 97       	sbiw	r28, 0x36	; 54
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61

	// -------- Inits --------- //
	SPEAKER_DDR |= (1 << SPEAKER);                 /* speaker for output */
 1ce:	57 9a       	sbi	0x0a, 7	; 10
	UART_Init0();
 1d0:	a9 df       	rcall	.-174    	; 0x124 <_Z10UART_Init0v>
	printString0("----- Serial Organ ------\r\n");
 1d2:	86 e3       	ldi	r24, 0x36	; 54
 1d4:	92 e0       	ldi	r25, 0x02	; 2
 1d6:	c0 df       	rcall	.-128    	; 0x158 <_Z12printString0PKc>
	char fromCompy;                        /* used to store serial input */
	uint16_t currentNoteLength = NOTE_DURATION / 2;
	const uint8_t keys[] = { 'a', 'w', 's', 'e', 'd', 'f', 't',
		'g', 'y', 'h', 'j', 'i', 'k', 'o',
		'l', 'p', ';', '\''
	};
 1d8:	82 e1       	ldi	r24, 0x12	; 18
 1da:	e0 e0       	ldi	r30, 0x00	; 0
 1dc:	f2 e0       	ldi	r31, 0x02	; 2
 1de:	de 01       	movw	r26, r28
 1e0:	11 96       	adiw	r26, 0x01	; 1
 1e2:	01 90       	ld	r0, Z+
 1e4:	0d 92       	st	X+, r0
 1e6:	8a 95       	dec	r24
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x28>
	const uint16_t notes[] = { G4, Gx4, A4, Ax4, B4, C5, Cx5,
		D5, Dx5, E5, F5, Fx5, G5, Gx5,
		A5, Ax5, B5, C6
	};
 1ea:	84 e2       	ldi	r24, 0x24	; 36
 1ec:	e2 e1       	ldi	r30, 0x12	; 18
 1ee:	f2 e0       	ldi	r31, 0x02	; 2
 1f0:	de 01       	movw	r26, r28
 1f2:	53 96       	adiw	r26, 0x13	; 19
 1f4:	01 90       	ld	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	8a 95       	dec	r24
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <main+0x3a>
	SPEAKER_DDR |= (1 << SPEAKER);                 /* speaker for output */
	UART_Init0();
	printString0("----- Serial Organ ------\r\n");

	char fromCompy;                        /* used to store serial input */
	uint16_t currentNoteLength = NOTE_DURATION / 2;
 1fc:	b1 2c       	mov	r11, r1
 1fe:	08 e7       	ldi	r16, 0x78	; 120

		/* Play Notes */
		isNote = 0;
		for (i = 0; i < sizeof(keys); i++) {
			if (fromCompy == keys[i]) {       /* found match in lookup table */
				playNote(notes[i], currentNoteLength);
 200:	ce 01       	movw	r24, r28
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	7c 01       	movw	r14, r24
		UART_TxChar0('N');     /* alert computer we're ready for next note */

		/* Play Notes */
		isNote = 0;
		for (i = 0; i < sizeof(keys); i++) {
			if (fromCompy == keys[i]) {       /* found match in lookup table */
 206:	51 2c       	mov	r5, r1
 208:	61 2c       	mov	r6, r1
 20a:	6e 01       	movw	r12, r28
 20c:	93 e1       	ldi	r25, 0x13	; 19
 20e:	c9 0e       	add	r12, r25
 210:	d1 1c       	adc	r13, r1
		if (!isNote) {
			if (fromCompy == '[') {                   /* code for short note */
				currentNoteLength = NOTE_DURATION / 2;
			}
			else if (fromCompy == ']') {               /* code for long note */
				currentNoteLength = NOTE_DURATION;
 212:	91 2c       	mov	r9, r1
 214:	0f 2e       	mov	r0, r31
 216:	f0 ef       	ldi	r31, 0xF0	; 240
 218:	af 2e       	mov	r10, r31
 21a:	f0 2d       	mov	r31, r0
		}

		/* Handle non-note keys: tempo changes and rests */
		if (!isNote) {
			if (fromCompy == '[') {                   /* code for short note */
				currentNoteLength = NOTE_DURATION / 2;
 21c:	71 2c       	mov	r7, r1
 21e:	0f 2e       	mov	r0, r31
 220:	f8 e7       	ldi	r31, 0x78	; 120
 222:	8f 2e       	mov	r8, r31
 224:	f0 2d       	mov	r31, r0
 226:	05 c0       	rjmp	.+10     	; 0x232 <main+0x78>
			}
			else if (fromCompy == ']') {               /* code for long note */
				currentNoteLength = NOTE_DURATION;
 228:	b9 2c       	mov	r11, r9
 22a:	0a 2d       	mov	r16, r10
 22c:	02 c0       	rjmp	.+4      	; 0x232 <main+0x78>
		}

		/* Handle non-note keys: tempo changes and rests */
		if (!isNote) {
			if (fromCompy == '[') {                   /* code for short note */
				currentNoteLength = NOTE_DURATION / 2;
 22e:	b7 2c       	mov	r11, r7

	// ------ Event loop ------ //
	while (1) {

		/* Get Key */
		fromCompy = UART_RxChar0();      /* waits here until there is input */
 230:	08 2d       	mov	r16, r8
 232:	8a df       	rcall	.-236    	; 0x148 <_Z12UART_RxChar0v>
		UART_TxChar0('N');     /* alert computer we're ready for next note */
 234:	18 2f       	mov	r17, r24
 236:	8e e4       	ldi	r24, 0x4E	; 78
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	7e df       	rcall	.-260    	; 0x138 <_Z12UART_TxChar0j>

		/* Play Notes */
		isNote = 0;
		for (i = 0; i < sizeof(keys); i++) {
			if (fromCompy == keys[i]) {       /* found match in lookup table */
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	18 17       	cp	r17, r24
 240:	49 f0       	breq	.+18     	; 0x254 <main+0x9a>
 242:	fe 01       	movw	r30, r28
 244:	32 96       	adiw	r30, 0x02	; 2
 246:	9f 01       	movw	r18, r30
 248:	2e 19       	sub	r18, r14
 24a:	3f 09       	sbc	r19, r15
 24c:	81 91       	ld	r24, Z+
 24e:	18 13       	cpse	r17, r24
 250:	0e c0       	rjmp	.+28     	; 0x26e <main+0xb4>
 252:	02 c0       	rjmp	.+4      	; 0x258 <main+0x9e>
 254:	25 2d       	mov	r18, r5
 256:	36 2d       	mov	r19, r6
				playNote(notes[i], currentNoteLength);
 258:	22 0f       	add	r18, r18
 25a:	33 1f       	adc	r19, r19
 25c:	f7 01       	movw	r30, r14
 25e:	e2 0f       	add	r30, r18
 260:	f3 1f       	adc	r31, r19
 262:	6b 2d       	mov	r22, r11
 264:	70 2f       	mov	r23, r16
 266:	82 89       	ldd	r24, Z+18	; 0x12
 268:	93 89       	ldd	r25, Z+19	; 0x13
 26a:	85 df       	rcall	.-246    	; 0x176 <_Z8playNotejj>
 26c:	e2 cf       	rjmp	.-60     	; 0x232 <main+0x78>
		fromCompy = UART_RxChar0();      /* waits here until there is input */
		UART_TxChar0('N');     /* alert computer we're ready for next note */

		/* Play Notes */
		isNote = 0;
		for (i = 0; i < sizeof(keys); i++) {
 26e:	ec 15       	cp	r30, r12
 270:	fd 05       	cpc	r31, r13
 272:	49 f7       	brne	.-46     	; 0x246 <main+0x8c>
		/* Handle non-note keys: tempo changes and rests */
		if (!isNote) {
			if (fromCompy == '[') {                   /* code for short note */
				currentNoteLength = NOTE_DURATION / 2;
			}
			else if (fromCompy == ']') {               /* code for long note */
 274:	06 c0       	rjmp	.+12     	; 0x282 <main+0xc8>
 276:	1d 35       	cpi	r17, 0x5D	; 93
				currentNoteLength = NOTE_DURATION;
			}
			else {                                /* unrecognized, just rest */
				rest(currentNoteLength);
 278:	b9 f2       	breq	.-82     	; 0x228 <main+0x6e>
 27a:	8b 2d       	mov	r24, r11
 27c:	90 2f       	mov	r25, r16
 27e:	96 df       	rcall	.-212    	; 0x1ac <_Z4restj>
 280:	d8 cf       	rjmp	.-80     	; 0x232 <main+0x78>
			}
		}

		/* Handle non-note keys: tempo changes and rests */
		if (!isNote) {
			if (fromCompy == '[') {                   /* code for short note */
 282:	1b 35       	cpi	r17, 0x5B	; 91
 284:	c1 f7       	brne	.-16     	; 0x276 <main+0xbc>
 286:	d3 cf       	rjmp	.-90     	; 0x22e <main+0x74>

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
