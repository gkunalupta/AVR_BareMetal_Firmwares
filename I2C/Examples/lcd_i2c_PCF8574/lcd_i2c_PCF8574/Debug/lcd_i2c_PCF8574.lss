
lcd_i2c_PCF8574.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  0000030e  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080020c  0080020c  000003ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000246f  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e99  00000000  00000000  00002ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010b3  00000000  00000000  00003950  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c8  00000000  00000000  00004a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001072  00000000  00000000  000051cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000243c  00000000  00000000  0000623e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000867a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e0       	ldi	r30, 0x0E	; 14
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 30       	cpi	r26, 0x0D	; 13
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	e2 d0       	rcall	.+452    	; 0x2e4 <main>
 120:	f4 c0       	rjmp	.+488    	; 0x30a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z13GB_UART_Init0v>:
		else
		{
			GB_LCD_string("1");
		}
	}
}
 124:	87 e6       	ldi	r24, 0x67	; 103
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 12c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 130:	88 e9       	ldi	r24, 0x98	; 152
 132:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 136:	08 95       	ret

00000138 <_Z18GB_TWI_init_masterv>:
 138:	88 e4       	ldi	r24, 0x48	; 72
 13a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
 13e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 142:	08 95       	ret

00000144 <_Z12GB_TWI_startv>:
 144:	84 ea       	ldi	r24, 0xA4	; 164
 146:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 14a:	ec eb       	ldi	r30, 0xBC	; 188
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	88 23       	and	r24, r24
 152:	ec f7       	brge	.-6      	; 0x14e <_Z12GB_TWI_startv+0xa>
 154:	e9 eb       	ldi	r30, 0xB9	; 185
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	88 7f       	andi	r24, 0xF8	; 248
 15c:	88 30       	cpi	r24, 0x08	; 8
 15e:	e1 f7       	brne	.-8      	; 0x158 <_Z12GB_TWI_startv+0x14>
 160:	08 95       	ret

00000162 <_Z26GB_TWI_write_slave_addressh>:
 162:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 166:	84 e8       	ldi	r24, 0x84	; 132
 168:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 16c:	ec eb       	ldi	r30, 0xBC	; 188
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	88 23       	and	r24, r24
 174:	ec f7       	brge	.-6      	; 0x170 <_Z26GB_TWI_write_slave_addressh+0xe>
 176:	e9 eb       	ldi	r30, 0xB9	; 185
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	88 7f       	andi	r24, 0xF8	; 248
 17e:	88 31       	cpi	r24, 0x18	; 24
 180:	e1 f7       	brne	.-8      	; 0x17a <_Z26GB_TWI_write_slave_addressh+0x18>
 182:	08 95       	ret

00000184 <_Z17GB_TWI_write_datah>:
 184:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 188:	84 e8       	ldi	r24, 0x84	; 132
 18a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 18e:	ec eb       	ldi	r30, 0xBC	; 188
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	88 23       	and	r24, r24
 196:	ec f7       	brge	.-6      	; 0x192 <_Z17GB_TWI_write_datah+0xe>
 198:	e9 eb       	ldi	r30, 0xB9	; 185
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	88 7f       	andi	r24, 0xF8	; 248
 1a0:	88 32       	cpi	r24, 0x28	; 40
 1a2:	e1 f7       	brne	.-8      	; 0x19c <_Z17GB_TWI_write_datah+0x18>
 1a4:	08 95       	ret

000001a6 <_Z11GB_TWI_stopv>:
 1a6:	84 e9       	ldi	r24, 0x94	; 148
 1a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 1ac:	ec eb       	ldi	r30, 0xBC	; 188
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	84 fd       	sbrc	r24, 4
 1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <_Z11GB_TWI_stopv+0xa>
 1b6:	08 95       	ret

000001b8 <_Z16GB_lcd_ioexanderh>:
 1b8:	cf 93       	push	r28
 1ba:	c8 2f       	mov	r28, r24
 1bc:	c3 df       	rcall	.-122    	; 0x144 <_Z12GB_TWI_startv>
 1be:	8e e7       	ldi	r24, 0x7E	; 126
 1c0:	d0 df       	rcall	.-96     	; 0x162 <_Z26GB_TWI_write_slave_addressh>
 1c2:	8c 2f       	mov	r24, r28
 1c4:	88 60       	ori	r24, 0x08	; 8
 1c6:	de df       	rcall	.-68     	; 0x184 <_Z17GB_TWI_write_datah>
 1c8:	ee df       	rcall	.-36     	; 0x1a6 <_Z11GB_TWI_stopv>
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <_Z16GB_lcd_write4bith>:
 1ce:	cf 93       	push	r28
 1d0:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1d4:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <__data_end>
 1d8:	c9 2b       	or	r28, r25
 1da:	c8 2b       	or	r28, r24
 1dc:	8c 2f       	mov	r24, r28
 1de:	84 60       	ori	r24, 0x04	; 4
 1e0:	eb df       	rcall	.-42     	; 0x1b8 <_Z16GB_lcd_ioexanderh>
 1e2:	8c 2f       	mov	r24, r28
 1e4:	8b 7f       	andi	r24, 0xFB	; 251
 1e6:	e8 df       	rcall	.-48     	; 0x1b8 <_Z16GB_lcd_ioexanderh>
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	80 e7       	ldi	r24, 0x70	; 112
 1ec:	92 e0       	ldi	r25, 0x02	; 2
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <_Z16GB_lcd_write4bith+0x20>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <_Z16GB_lcd_write4bith+0x2a>
 1f8:	00 00       	nop
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <_Z14GB_LCD_commandh>:
 1fe:	cf 93       	push	r28
 200:	c8 2f       	mov	r28, r24
 202:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 206:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
 20a:	80 7f       	andi	r24, 0xF0	; 240
 20c:	e0 df       	rcall	.-64     	; 0x1ce <_Z16GB_lcd_write4bith>
 20e:	8c 2f       	mov	r24, r28
 210:	82 95       	swap	r24
 212:	80 7f       	andi	r24, 0xF0	; 240
 214:	dc df       	rcall	.-72     	; 0x1ce <_Z16GB_lcd_write4bith>
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <_Z12GB_lcd_clearv>:
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	f0 df       	rcall	.-32     	; 0x1fe <_Z14GB_LCD_commandh>
 21e:	2f ef       	ldi	r18, 0xFF	; 255
 220:	89 ef       	ldi	r24, 0xF9	; 249
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	21 50       	subi	r18, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <_Z12GB_lcd_clearv+0xa>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <_Z12GB_lcd_clearv+0x14>
 22e:	00 00       	nop
 230:	08 95       	ret

00000232 <_Z11GB_LCD_datah>:
 232:	cf 93       	push	r28
 234:	c8 2f       	mov	r28, r24
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 23c:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
 240:	8c 2f       	mov	r24, r28
 242:	80 7f       	andi	r24, 0xF0	; 240
 244:	c4 df       	rcall	.-120    	; 0x1ce <_Z16GB_lcd_write4bith>
 246:	8c 2f       	mov	r24, r28
 248:	82 95       	swap	r24
 24a:	80 7f       	andi	r24, 0xF0	; 240
 24c:	c0 df       	rcall	.-128    	; 0x1ce <_Z16GB_lcd_write4bith>
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <_Z13GB_LCD_stringPKc>:
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	ec 01       	movw	r28, r24
 258:	88 81       	ld	r24, Y
 25a:	88 23       	and	r24, r24
 25c:	41 f0       	breq	.+16     	; 0x26e <_Z13GB_LCD_stringPKc+0x1c>
 25e:	21 96       	adiw	r28, 0x01	; 1
 260:	e8 df       	rcall	.-48     	; 0x232 <_Z11GB_LCD_datah>
 262:	80 ef       	ldi	r24, 0xF0	; 240
 264:	8a 95       	dec	r24
 266:	f1 f7       	brne	.-4      	; 0x264 <_Z13GB_LCD_stringPKc+0x12>
 268:	89 91       	ld	r24, Y+
 26a:	81 11       	cpse	r24, r1
 26c:	f9 cf       	rjmp	.-14     	; 0x260 <_Z13GB_LCD_stringPKc+0xe>
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <_Z11GB_LCD_initv>:
	
	
	
	void GB_LCD_init()
	{
		GB_TWI_init_master();
 274:	61 df       	rcall	.-318    	; 0x138 <_Z18GB_TWI_init_masterv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 276:	8f e8       	ldi	r24, 0x8F	; 143
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <_Z11GB_LCD_initv+0x6>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <_Z11GB_LCD_initv+0xc>
 280:	00 00       	nop
		_delay_us(100);
		GB_lcd_ioexander(0x00);
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	99 df       	rcall	.-206    	; 0x1b8 <_Z16GB_lcd_ioexanderh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 286:	9f e7       	ldi	r25, 0x7F	; 127
 288:	28 e3       	ldi	r18, 0x38	; 56
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	91 50       	subi	r25, 0x01	; 1
 28e:	20 40       	sbci	r18, 0x00	; 0
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <_Z11GB_LCD_initv+0x18>
 294:	00 c0       	rjmp	.+0      	; 0x296 <_Z11GB_LCD_initv+0x22>
		//printString0("kunal\n");
		_delay_ms(25);  // LCD Power ON delay always >15ms
		{
			GB_LCD_command(gb_lcd_4bit_2line); //Function set -->8-bit mode is selected,2lines
 296:	00 00       	nop
 298:	88 e2       	ldi	r24, 0x28	; 40
 29a:	b1 df       	rcall	.-158    	; 0x1fe <_Z14GB_LCD_commandh>
 29c:	8f e1       	ldi	r24, 0x1F	; 31
 29e:	9e e4       	ldi	r25, 0x4E	; 78
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <_Z11GB_LCD_initv+0x2c>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <_Z11GB_LCD_initv+0x32>
			_delay_ms(5);
			GB_LCD_command(gb_lcd_4bit_2line); //Function set -->8-bit mode is selected,2lines
 2a6:	00 00       	nop
 2a8:	88 e2       	ldi	r24, 0x28	; 40
 2aa:	a9 df       	rcall	.-174    	; 0x1fe <_Z14GB_LCD_commandh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	8f e7       	ldi	r24, 0x7F	; 127
 2ae:	92 e0       	ldi	r25, 0x02	; 2
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <_Z11GB_LCD_initv+0x3c>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <_Z11GB_LCD_initv+0x42>
			_delay_us(160);
			GB_LCD_command(gb_lcd_4bit_2line); //Function set -->8-bit mode is selected,2lines
 2b6:	00 00       	nop
 2b8:	88 e2       	ldi	r24, 0x28	; 40
 2ba:	a1 df       	rcall	.-190    	; 0x1fe <_Z14GB_LCD_commandh>
		}
		GB_LCD_command(gb_lcd_4bit_2line); //Function set -->8-bit mode is selected,2lines
 2bc:	88 e2       	ldi	r24, 0x28	; 40
 2be:	9f df       	rcall	.-194    	; 0x1fe <_Z14GB_LCD_commandh>
 2c0:	90 ef       	ldi	r25, 0xF0	; 240
 2c2:	9a 95       	dec	r25
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <_Z11GB_LCD_initv+0x4e>
		_delay_us(45);
		GB_LCD_command(gb_lcd_DN_CF_BF); // Display ON/OFF control -->dispaly is on ,cursor is on and cursor blink is off
 2c6:	8c e0       	ldi	r24, 0x0C	; 12
 2c8:	9a df       	rcall	.-204    	; 0x1fe <_Z14GB_LCD_commandh>
 2ca:	8f e9       	ldi	r24, 0x9F	; 159
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2cc:	9f e0       	ldi	r25, 0x0F	; 15
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <_Z11GB_LCD_initv+0x5a>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <_Z11GB_LCD_initv+0x60>
 2d4:	00 00       	nop
		_delay_ms(1);
		//lcd_clear();
		GB_LCD_command(gb_lcd_CML_DMF); // Entry mode set --> cursor moves to right and DRAM is incremented by 1 , shift of display is off
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	92 df       	rcall	.-220    	; 0x1fe <_Z14GB_LCD_commandh>
 2da:	95 ed       	ldi	r25, 0xD5	; 213
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2dc:	9a 95       	dec	r25
 2de:	f1 f7       	brne	.-4      	; 0x2dc <_Z11GB_LCD_initv+0x68>
 2e0:	00 00       	nop
 2e2:	08 95       	ret

000002e4 <main>:
 2e4:	1f df       	rcall	.-450    	; 0x124 <_Z13GB_UART_Init0v>
int main(void)
{
	GB_UART_Init0();
	//TWI_init_master();
	
	GB_LCD_init();
 2e6:	c6 df       	rcall	.-116    	; 0x274 <_Z11GB_LCD_initv>
	GB_lcd_clear();
 2e8:	98 df       	rcall	.-208    	; 0x21a <_Z12GB_lcd_clearv>

	//	LCD_string("Gettobyte");
	GB_LCD_string("G");
 2ea:	88 e0       	ldi	r24, 0x08	; 8
 2ec:	92 e0       	ldi	r25, 0x02	; 2
 2ee:	b1 df       	rcall	.-158    	; 0x252 <_Z13GB_LCD_stringPKc>
	//	LCD_string("LCD_I2C");
	while (1) 
    {
		//	LCD_command(lcd_4bit_1line);
			
		GB_LCD_string("k");
 2f0:	8a e0       	ldi	r24, 0x0A	; 10
 2f2:	92 e0       	ldi	r25, 0x02	; 2
 2f4:	ae df       	rcall	.-164    	; 0x252 <_Z13GB_LCD_stringPKc>
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f8:	81 ee       	ldi	r24, 0xE1	; 225
 2fa:	94 e0       	ldi	r25, 0x04	; 4
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <main+0x18>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x22>
 306:	00 00       	nop
 308:	f3 cf       	rjmp	.-26     	; 0x2f0 <main+0xc>

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
