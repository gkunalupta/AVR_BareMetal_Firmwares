
preprototypesanitation_2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800200  00000580  00000614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000580  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080021a  0080021a  0000062e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002263  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eca  00000000  00000000  00002b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000114a  00000000  00000000  000039dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a4  00000000  00000000  00004b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d72  00000000  00000000  000051cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d67  00000000  00000000  00005f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00007ca5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	00 c2       	rjmp	.+1024   	; 0x40a <__vector_2>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e8       	ldi	r30, 0x80	; 128
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 31       	cpi	r26, 0x1A	; 26
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e1       	ldi	r26, 0x1A	; 26
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 31       	cpi	r26, 0x1D	; 29
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	aa d1       	rcall	.+852    	; 0x474 <main>
 120:	2d c2       	rjmp	.+1114   	; 0x57c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z10UART_Init0v>:
	while (TCNT1 <= 46874)
	{
		PIN_PORT |= (1 << PIN_NO);    // toggles the led
	}
	TCNT1 = 0;            // reset counter
	CLEAR_BIT(PIN_PORT,PIN_NO);
 124:	87 e6       	ldi	r24, 0x67	; 103
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 12c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 130:	88 e9       	ldi	r24, 0x98	; 152
 132:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 136:	08 95       	ret

00000138 <_Z12UART_TxChar0j>:
 138:	e0 ec       	ldi	r30, 0xC0	; 192
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	90 81       	ld	r25, Z
 13e:	95 ff       	sbrs	r25, 5
 140:	fd cf       	rjmp	.-6      	; 0x13c <_Z12UART_TxChar0j+0x4>
 142:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 146:	08 95       	ret

00000148 <_Z12printString0PKc>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	88 81       	ld	r24, Y
 150:	88 23       	and	r24, r24
 152:	31 f0       	breq	.+12     	; 0x160 <_Z12printString0PKc+0x18>
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ef df       	rcall	.-34     	; 0x138 <_Z12UART_TxChar0j>
 15a:	89 91       	ld	r24, Y+
 15c:	81 11       	cpse	r24, r1
 15e:	fb cf       	rjmp	.-10     	; 0x156 <_Z12printString0PKc+0xe>
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <_Z4bit0m>:
 166:	cf 92       	push	r12
 168:	df 92       	push	r13
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	6b 01       	movw	r12, r22
 178:	7c 01       	movw	r14, r24
 17a:	c7 e0       	ldi	r28, 0x07	; 7
 17c:	d0 e0       	ldi	r29, 0x00	; 0
 17e:	01 e0       	ldi	r16, 0x01	; 1
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	c8 01       	movw	r24, r16
 184:	0c 2e       	mov	r0, r28
 186:	02 c0       	rjmp	.+4      	; 0x18c <_Z4bit0m+0x26>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <_Z4bit0m+0x22>
 190:	09 2e       	mov	r0, r25
 192:	00 0c       	add	r0, r0
 194:	aa 0b       	sbc	r26, r26
 196:	bb 0b       	sbc	r27, r27
 198:	8c 21       	and	r24, r12
 19a:	9d 21       	and	r25, r13
 19c:	ae 21       	and	r26, r14
 19e:	bf 21       	and	r27, r15
 1a0:	89 2b       	or	r24, r25
 1a2:	8a 2b       	or	r24, r26
 1a4:	8b 2b       	or	r24, r27
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <_Z4bit0m+0x4a>
 1a8:	80 e3       	ldi	r24, 0x30	; 48
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	c5 df       	rcall	.-118    	; 0x138 <_Z12UART_TxChar0j>
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <_Z4bit0m+0x50>
 1b0:	81 e3       	ldi	r24, 0x31	; 49
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	c1 df       	rcall	.-126    	; 0x138 <_Z12UART_TxChar0j>
 1b6:	21 97       	sbiw	r28, 0x01	; 1
 1b8:	20 f7       	brcc	.-56     	; 0x182 <_Z4bit0m+0x1c>
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	ff 90       	pop	r15
 1c4:	ef 90       	pop	r14
 1c6:	df 90       	pop	r13
 1c8:	cf 90       	pop	r12
 1ca:	08 95       	ret

000001cc <_Z16lcd_enable_pulsev>:
 1cc:	2d 9a       	sbi	0x05, 5	; 5
 1ce:	8f e9       	ldi	r24, 0x9F	; 159
 1d0:	9f e0       	ldi	r25, 0x0F	; 15
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <_Z16lcd_enable_pulsev+0x6>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <_Z16lcd_enable_pulsev+0xc>
 1d8:	00 00       	nop
 1da:	2d 98       	cbi	0x05, 5	; 5
 1dc:	8f e9       	ldi	r24, 0x9F	; 159
 1de:	9f e0       	ldi	r25, 0x0F	; 15
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <_Z16lcd_enable_pulsev+0x14>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <_Z16lcd_enable_pulsev+0x1a>
 1e6:	00 00       	nop
 1e8:	08 95       	ret

000001ea <_Z13lcd_write8bith>:
 1ea:	ea e0       	ldi	r30, 0x0A	; 10
 1ec:	f1 e0       	ldi	r31, 0x01	; 1
 1ee:	90 81       	ld	r25, Z
 1f0:	9f ef       	ldi	r25, 0xFF	; 255
 1f2:	90 83       	st	Z, r25
 1f4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
 1f8:	e9 cf       	rjmp	.-46     	; 0x1cc <_Z16lcd_enable_pulsev>
 1fa:	08 95       	ret

000001fc <_Z14read_BF_adressv>:
 1fc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
 200:	2f 98       	cbi	0x05, 7	; 5
 202:	2e 9a       	sbi	0x05, 6	; 5
 204:	2d 9a       	sbi	0x05, 5	; 5
 206:	8f e9       	ldi	r24, 0x9F	; 159
 208:	9f e0       	ldi	r25, 0x0F	; 15
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <_Z14read_BF_adressv+0xe>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <_Z14read_BF_adressv+0x14>
 210:	00 00       	nop
 212:	89 b1       	in	r24, 0x09	; 9
 214:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <address_counter>
 218:	2d 98       	cbi	0x05, 5	; 5
 21a:	8f e9       	ldi	r24, 0x9F	; 159
 21c:	9f e0       	ldi	r25, 0x0F	; 15
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <_Z14read_BF_adressv+0x22>
 222:	00 c0       	rjmp	.+0      	; 0x224 <_Z14read_BF_adressv+0x28>
 224:	00 00       	nop
 226:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <address_counter>
 22a:	08 95       	ret

0000022c <_Z8LCD_waitv>:
 22c:	e7 df       	rcall	.-50     	; 0x1fc <_Z14read_BF_adressv>
 22e:	88 23       	and	r24, r24
 230:	ec f3       	brlt	.-6      	; 0x22c <_Z8LCD_waitv>
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	08 95       	ret

00000238 <_Z11LCD_commandh>:
 238:	cf 93       	push	r28
 23a:	c8 2f       	mov	r28, r24
 23c:	f7 df       	rcall	.-18     	; 0x22c <_Z8LCD_waitv>
 23e:	89 2b       	or	r24, r25
 240:	29 f0       	breq	.+10     	; 0x24c <_Z11LCD_commandh+0x14>
 242:	2f 98       	cbi	0x05, 7	; 5
 244:	2e 98       	cbi	0x05, 6	; 5
 246:	8c 2f       	mov	r24, r28
 248:	d0 df       	rcall	.-96     	; 0x1ea <_Z13lcd_write8bith>
 24a:	09 c0       	rjmp	.+18     	; 0x25e <_Z11LCD_commandh+0x26>
 24c:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <address_counter>
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	87 df       	rcall	.-242    	; 0x166 <_Z4bit0m>
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	92 e0       	ldi	r25, 0x02	; 2
 25c:	75 df       	rcall	.-278    	; 0x148 <_Z12printString0PKc>
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <_Z9lcd_clearv>:
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	e9 df       	rcall	.-46     	; 0x238 <_Z11LCD_commandh>
 266:	8f e3       	ldi	r24, 0x3F	; 63
 268:	9f e1       	ldi	r25, 0x1F	; 31
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <_Z9lcd_clearv+0x8>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <_Z9lcd_clearv+0xe>
 270:	00 00       	nop
 272:	08 95       	ret

00000274 <_Z8LCD_initv>:
 274:	84 b1       	in	r24, 0x04	; 4
 276:	80 6e       	ori	r24, 0xE0	; 224
 278:	84 b9       	out	0x04, r24	; 4
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	80 e7       	ldi	r24, 0x70	; 112
 27e:	92 e0       	ldi	r25, 0x02	; 2
 280:	21 50       	subi	r18, 0x01	; 1
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <_Z8LCD_initv+0xc>
 288:	00 c0       	rjmp	.+0      	; 0x28a <_Z8LCD_initv+0x16>
 28a:	00 00       	nop
 28c:	88 e3       	ldi	r24, 0x38	; 56
 28e:	d4 df       	rcall	.-88     	; 0x238 <_Z11LCD_commandh>
 290:	87 ec       	ldi	r24, 0xC7	; 199
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <_Z8LCD_initv+0x20>
 298:	00 c0       	rjmp	.+0      	; 0x29a <_Z8LCD_initv+0x26>
 29a:	00 00       	nop
 29c:	88 e3       	ldi	r24, 0x38	; 56
 29e:	cc df       	rcall	.-104    	; 0x238 <_Z11LCD_commandh>
 2a0:	87 ec       	ldi	r24, 0xC7	; 199
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <_Z8LCD_initv+0x30>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <_Z8LCD_initv+0x36>
 2aa:	00 00       	nop
 2ac:	8c e0       	ldi	r24, 0x0C	; 12
 2ae:	c4 df       	rcall	.-120    	; 0x238 <_Z11LCD_commandh>
 2b0:	90 ef       	ldi	r25, 0xF0	; 240
 2b2:	9a 95       	dec	r25
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <_Z8LCD_initv+0x3e>
 2b6:	86 e0       	ldi	r24, 0x06	; 6
 2b8:	bf df       	rcall	.-130    	; 0x238 <_Z11LCD_commandh>
 2ba:	20 ef       	ldi	r18, 0xF0	; 240
 2bc:	2a 95       	dec	r18
 2be:	f1 f7       	brne	.-4      	; 0x2bc <_Z8LCD_initv+0x48>
 2c0:	d0 df       	rcall	.-96     	; 0x262 <_Z9lcd_clearv>
 2c2:	8f e1       	ldi	r24, 0x1F	; 31
 2c4:	9e e4       	ldi	r25, 0x4E	; 78
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <_Z8LCD_initv+0x52>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <_Z8LCD_initv+0x58>
 2cc:	00 00       	nop
 2ce:	08 95       	ret

000002d0 <_Z8LCD_datah>:
 2d0:	2f 9a       	sbi	0x05, 7	; 5
 2d2:	2e 98       	cbi	0x05, 6	; 5
 2d4:	8a cf       	rjmp	.-236    	; 0x1ea <_Z13lcd_write8bith>
 2d6:	08 95       	ret

000002d8 <_Z12lcd_printinti>:
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	ec 01       	movw	r28, r24
 2e0:	68 ee       	ldi	r22, 0xE8	; 232
 2e2:	73 e0       	ldi	r23, 0x03	; 3
 2e4:	24 d1       	rcall	.+584    	; 0x52e <__divmodhi4>
 2e6:	16 2f       	mov	r17, r22
 2e8:	66 23       	and	r22, r22
 2ea:	19 f0       	breq	.+6      	; 0x2f2 <_Z12lcd_printinti+0x1a>
 2ec:	80 e3       	ldi	r24, 0x30	; 48
 2ee:	86 0f       	add	r24, r22
 2f0:	ef df       	rcall	.-34     	; 0x2d0 <_Z8LCD_datah>
 2f2:	28 e1       	ldi	r18, 0x18	; 24
 2f4:	3c ef       	ldi	r19, 0xFC	; 252
 2f6:	12 9f       	mul	r17, r18
 2f8:	c0 01       	movw	r24, r0
 2fa:	13 9f       	mul	r17, r19
 2fc:	90 0d       	add	r25, r0
 2fe:	11 24       	eor	r1, r1
 300:	8c 0f       	add	r24, r28
 302:	9d 1f       	adc	r25, r29
 304:	64 e6       	ldi	r22, 0x64	; 100
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	12 d1       	rcall	.+548    	; 0x52e <__divmodhi4>
 30a:	66 23       	and	r22, r22
 30c:	19 f0       	breq	.+6      	; 0x314 <_Z12lcd_printinti+0x3c>
 30e:	80 e3       	ldi	r24, 0x30	; 48
 310:	86 0f       	add	r24, r22
 312:	de df       	rcall	.-68     	; 0x2d0 <_Z8LCD_datah>
 314:	ce 01       	movw	r24, r28
 316:	64 e6       	ldi	r22, 0x64	; 100
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	09 d1       	rcall	.+530    	; 0x52e <__divmodhi4>
 31c:	6a e0       	ldi	r22, 0x0A	; 10
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	06 d1       	rcall	.+524    	; 0x52e <__divmodhi4>
 322:	66 23       	and	r22, r22
 324:	19 f0       	breq	.+6      	; 0x32c <_Z12lcd_printinti+0x54>
 326:	80 e3       	ldi	r24, 0x30	; 48
 328:	86 0f       	add	r24, r22
 32a:	d2 df       	rcall	.-92     	; 0x2d0 <_Z8LCD_datah>
 32c:	ce 01       	movw	r24, r28
 32e:	6a e0       	ldi	r22, 0x0A	; 10
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	fd d0       	rcall	.+506    	; 0x52e <__divmodhi4>
 334:	88 23       	and	r24, r24
 336:	11 f0       	breq	.+4      	; 0x33c <_Z12lcd_printinti+0x64>
 338:	80 5d       	subi	r24, 0xD0	; 208
 33a:	ca df       	rcall	.-108    	; 0x2d0 <_Z8LCD_datah>
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	08 95       	ret

00000344 <_Z16lcd_printint_numi>:
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	ec 01       	movw	r28, r24
 34c:	68 ee       	ldi	r22, 0xE8	; 232
 34e:	73 e0       	ldi	r23, 0x03	; 3
 350:	ee d0       	rcall	.+476    	; 0x52e <__divmodhi4>
 352:	16 2f       	mov	r17, r22
 354:	80 e3       	ldi	r24, 0x30	; 48
 356:	86 0f       	add	r24, r22
 358:	bb df       	rcall	.-138    	; 0x2d0 <_Z8LCD_datah>
 35a:	28 e1       	ldi	r18, 0x18	; 24
 35c:	3c ef       	ldi	r19, 0xFC	; 252
 35e:	12 9f       	mul	r17, r18
 360:	c0 01       	movw	r24, r0
 362:	13 9f       	mul	r17, r19
 364:	90 0d       	add	r25, r0
 366:	11 24       	eor	r1, r1
 368:	8c 0f       	add	r24, r28
 36a:	9d 1f       	adc	r25, r29
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	64 e6       	ldi	r22, 0x64	; 100
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	dd d0       	rcall	.+442    	; 0x52e <__divmodhi4>
 374:	66 23       	and	r22, r22
 376:	19 f0       	breq	.+6      	; 0x37e <_Z16lcd_printint_numi+0x3a>
 378:	80 e3       	ldi	r24, 0x30	; 48
 37a:	86 0f       	add	r24, r22
 37c:	a9 df       	rcall	.-174    	; 0x2d0 <_Z8LCD_datah>
 37e:	ce 01       	movw	r24, r28
 380:	64 e6       	ldi	r22, 0x64	; 100
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	d4 d0       	rcall	.+424    	; 0x52e <__divmodhi4>
 386:	6a e0       	ldi	r22, 0x0A	; 10
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	d1 d0       	rcall	.+418    	; 0x52e <__divmodhi4>
 38c:	66 23       	and	r22, r22
 38e:	19 f0       	breq	.+6      	; 0x396 <_Z16lcd_printint_numi+0x52>
 390:	80 e3       	ldi	r24, 0x30	; 48
 392:	86 0f       	add	r24, r22
 394:	9d df       	rcall	.-198    	; 0x2d0 <_Z8LCD_datah>
 396:	ce 01       	movw	r24, r28
 398:	6a e0       	ldi	r22, 0x0A	; 10
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	c8 d0       	rcall	.+400    	; 0x52e <__divmodhi4>
 39e:	80 5d       	subi	r24, 0xD0	; 208
 3a0:	97 df       	rcall	.-210    	; 0x2d0 <_Z8LCD_datah>
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	08 95       	ret

000003aa <_Z10LCD_stringPKc>:
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	ec 01       	movw	r28, r24
 3b0:	88 81       	ld	r24, Y
 3b2:	88 23       	and	r24, r24
 3b4:	41 f0       	breq	.+16     	; 0x3c6 <_Z10LCD_stringPKc+0x1c>
 3b6:	21 96       	adiw	r28, 0x01	; 1
 3b8:	8b df       	rcall	.-234    	; 0x2d0 <_Z8LCD_datah>
 3ba:	80 ef       	ldi	r24, 0xF0	; 240
 3bc:	8a 95       	dec	r24
 3be:	f1 f7       	brne	.-4      	; 0x3bc <_Z10LCD_stringPKc+0x12>
 3c0:	89 91       	ld	r24, Y+
 3c2:	81 11       	cpse	r24, r1
 3c4:	f9 cf       	rjmp	.-14     	; 0x3b8 <_Z10LCD_stringPKc+0xe>
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <_Z12Timer_4_secsv>:
void Timer_4_secs()
{
	//lcd_print2line("4 sec");
	// set up timer with prescaler = 1024 , Timer_frequency=15625 hz,
	// period= 6.4*10^-5, Max_delay=4.194secs , normal mode
	TCCR1B |= (1 << CS12)|(1<<CS10);
 3cc:	e1 e8       	ldi	r30, 0x81	; 129
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	85 60       	ori	r24, 0x05	; 5
 3d4:	80 83       	st	Z, r24
	
	// initialize counter
	TCNT1 = 0;
 3d6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 3da:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	int c=0;
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	30 e0       	ldi	r19, 0x00	; 0
	while (TCNT1 <= 62499)
 3e2:	e4 e8       	ldi	r30, 0x84	; 132
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	91 81       	ldd	r25, Z+1	; 0x01
 3ea:	84 32       	cpi	r24, 0x24	; 36
 3ec:	94 4f       	sbci	r25, 0xF4	; 244
 3ee:	38 f4       	brcc	.+14     	; 0x3fe <_Z12Timer_4_secsv+0x32>
	{   if(c<1)
 3f0:	12 16       	cp	r1, r18
 3f2:	13 06       	cpc	r1, r19
 3f4:	c4 f3       	brlt	.-16     	; 0x3e6 <_Z12Timer_4_secsv+0x1a>
		{
			PIN_PORT |= (1 << PIN_NO);    // toggles the led
 3f6:	2c 9a       	sbi	0x05, 4	; 5
			//  lcd_print2line("moton");
			c++;
 3f8:	2f 5f       	subi	r18, 0xFF	; 255
 3fa:	3f 4f       	sbci	r19, 0xFF	; 255
 3fc:	f4 cf       	rjmp	.-24     	; 0x3e6 <_Z12Timer_4_secsv+0x1a>
		}
	}
	TCNT1 = 0;            // reset counter
 3fe:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 402:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	CLEAR_BIT(PIN_PORT,PIN_NO);
 406:	2c 98       	cbi	0x05, 4	; 5
 408:	08 95       	ret

0000040a <__vector_2>:
//#define LCD_data_dir DDRD  
//#define LCD_data_port PORTD 


ISR(INT1_vect)
{
 40a:	1f 92       	push	r1
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	0f 92       	push	r0
 412:	11 24       	eor	r1, r1
 414:	0b b6       	in	r0, 0x3b	; 59
 416:	0f 92       	push	r0
 418:	2f 93       	push	r18
 41a:	3f 93       	push	r19
 41c:	4f 93       	push	r20
 41e:	5f 93       	push	r21
 420:	6f 93       	push	r22
 422:	7f 93       	push	r23
 424:	8f 93       	push	r24
 426:	9f 93       	push	r25
 428:	af 93       	push	r26
 42a:	bf 93       	push	r27
 42c:	ef 93       	push	r30
 42e:	ff 93       	push	r31
	a=000;
 430:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <__data_end+0x1>
 434:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__data_end>
	LCD_command(lcd_rhome);
	_delay_ms(2);
}
void lcd_setcursor(uint8_t col, uint8_t row)
{
	LCD_command((0x80|(row<<6))+col);
 438:	86 e8       	ldi	r24, 0x86	; 134
 43a:	fe de       	rcall	.-516    	; 0x238 <_Z11LCD_commandh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43c:	85 ed       	ldi	r24, 0xD5	; 213
 43e:	8a 95       	dec	r24
 440:	f1 f7       	brne	.-4      	; 0x43e <__vector_2+0x34>
 442:	00 00       	nop
	lcd_setcursor(6,0);
	lcd_printint(a);
 444:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
 448:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <__data_end+0x1>
 44c:	45 df       	rcall	.-374    	; 0x2d8 <_Z12lcd_printinti>
}
 44e:	ff 91       	pop	r31
 450:	ef 91       	pop	r30
 452:	bf 91       	pop	r27
 454:	af 91       	pop	r26
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	7f 91       	pop	r23
 45c:	6f 91       	pop	r22
 45e:	5f 91       	pop	r21
 460:	4f 91       	pop	r20
 462:	3f 91       	pop	r19
 464:	2f 91       	pop	r18
 466:	0f 90       	pop	r0
 468:	0b be       	out	0x3b, r0	; 59
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <main>:
int main(void)
{  
	 UART_Init0();
 474:	57 de       	rcall	.-850    	; 0x124 <_Z10UART_Init0v>
	 // when using external interrupts INT pins then pin has to be declared as output (1), 
	 //when  using with general pooling method then pin has to be declared as input (0)
	 
	 //for atmega 2560
	reset_sinput_dir |= (1<<sensor_pin)|(1<<reset_pin)|(1<<PIN_NO)|(0<<Flow_pin);   // PD0 as input for reading sensor by relay , PD1 for reset button  , PD2 as pin for operating mtor
 476:	84 b1       	in	r24, 0x04	; 4
 478:	88 63       	ori	r24, 0x38	; 56
 47a:	84 b9       	out	0x04, r24	; 4
	
	//for atmega 328
	reset_sinput_dir |= (1<<sensor_pin)|(1<<PIN_NO); 
 47c:	84 b1       	in	r24, 0x04	; 4
 47e:	80 63       	ori	r24, 0x30	; 48
 480:	84 b9       	out	0x04, r24	; 4
	LCD_data_dir |= (1<<reset_pin)|(0<<Flow_pin);
 482:	ea e0       	ldi	r30, 0x0A	; 10
 484:	f1 e0       	ldi	r31, 0x01	; 1
 486:	80 81       	ld	r24, Z
 488:	88 60       	ori	r24, 0x08	; 8
 48a:	80 83       	st	Z, r24
	
	EIMSK |=(1<<INT1);          // external interrupt for reset button
 48c:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |=(1<<ISC01)|(1<<ISC00)|(1<<ISC11)|(1<<ISC10);
 48e:	e9 e6       	ldi	r30, 0x69	; 105
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	8f 60       	ori	r24, 0x0F	; 15
 496:	80 83       	st	Z, r24
	
	int q =4;
	
	uint8_t prev_state;
	uint8_t curr_state;
	LCD_init();
 498:	78 94       	sei
 49a:	ec de       	rcall	.-552    	; 0x274 <_Z8LCD_initv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49c:	2f ef       	ldi	r18, 0xFF	; 255
 49e:	89 ef       	ldi	r24, 0xF9	; 249
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	21 50       	subi	r18, 0x01	; 1
 4a4:	80 40       	sbci	r24, 0x00	; 0
 4a6:	90 40       	sbci	r25, 0x00	; 0
 4a8:	e1 f7       	brne	.-8      	; 0x4a2 <main+0x2e>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <main+0x38>
 4ac:	00 00       	nop
	//lcd_clear();
	_delay_ms(20);
	LCD_string("COUNT:");
 4ae:	89 e0       	ldi	r24, 0x09	; 9
 4b0:	92 e0       	ldi	r25, 0x02	; 2
 4b2:	7b df       	rcall	.-266    	; 0x3aa <_Z10LCD_stringPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b4:	87 ec       	ldi	r24, 0xC7	; 199
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <main+0x44>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <main+0x4a>
 4be:	00 00       	nop
 4c0:	80 ec       	ldi	r24, 0xC0	; 192
 4c2:	ba de       	rcall	.-652    	; 0x238 <_Z11LCD_commandh>
 4c4:	95 ed       	ldi	r25, 0xD5	; 213
 4c6:	9a 95       	dec	r25
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <main+0x52>
	_delay_us(50);
	lcd_setcursor(0,1);
	LCD_string("TIME(ms):");
 4ca:	00 00       	nop
 4cc:	80 e1       	ldi	r24, 0x10	; 16
 4ce:	92 e0       	ldi	r25, 0x02	; 2
 4d0:	6c df       	rcall	.-296    	; 0x3aa <_Z10LCD_stringPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d2:	8f e3       	ldi	r24, 0x3F	; 63
 4d4:	9c e9       	ldi	r25, 0x9C	; 156
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <main+0x62>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <main+0x68>
	_delay_ms(10);
	lcd_printint_num(q);
 4dc:	00 00       	nop
 4de:	84 e0       	ldi	r24, 0x04	; 4
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	30 df       	rcall	.-416    	; 0x344 <_Z16lcd_printint_numi>
 4e4:	8f e3       	ldi	r24, 0x3F	; 63
 4e6:	9c e9       	ldi	r25, 0x9C	; 156
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <main+0x74>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <main+0x7a>
 4ee:	00 00       	nop
	_delay_ms(10);
	prev_state |= ((reset_sinput_pinport) & (1<<sensor_pin));
 4f0:	83 b1       	in	r24, 0x03	; 3
 4f2:	80 72       	andi	r24, 0x20	; 32
		
		   //should be off
					//lcd_setcursor(8,0);
			//prev_state = ((PIND) & (1<<sensor_pin));		//lcd_bit(prev_state);
					//int x=0;
		while(IS_SET(reset_sinput_pinport,sensor_pin))
 4f4:	1d 9b       	sbis	0x03, 5	; 3
		{  //lcd_print2line("seven");
			curr_state = ((reset_sinput_pinport) & (1<<sensor_pin));
 4f6:	fe cf       	rjmp	.-4      	; 0x4f4 <main+0x80>
			//lcd_print2line("seven");
			//lcd_bit(curr_state);
			//lcd_setcursor(8,0);
			//lcd_bit(prev_state);

			if(prev_state != curr_state)
 4f8:	93 b1       	in	r25, 0x03	; 3
 4fa:	90 72       	andi	r25, 0x20	; 32
 4fc:	98 17       	cp	r25, r24
 4fe:	a1 f0       	breq	.+40     	; 0x528 <main+0xb4>
 500:	86 e8       	ldi	r24, 0x86	; 134
 502:	9a de       	rcall	.-716    	; 0x238 <_Z11LCD_commandh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 504:	95 ed       	ldi	r25, 0xD5	; 213
 506:	9a 95       	dec	r25
 508:	f1 f7       	brne	.-4      	; 0x506 <main+0x92>
 50a:	00 00       	nop
			{
			lcd_setcursor(6,0);
			a++;
 50c:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
 510:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <__data_end+0x1>
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <__data_end+0x1>
			lcd_printint(a);
 51a:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <__data_end>
			//lcd_print2line("Gupta");
			//_delay_ms(100);
			Timer_4_secs();
 51e:	dc de       	rcall	.-584    	; 0x2d8 <_Z12lcd_printinti>
 520:	55 df       	rcall	.-342    	; 0x3cc <_Z12Timer_4_secsv>
			prev_state = ((reset_sinput_pinport) & (1<<sensor_pin));
 522:	83 b1       	in	r24, 0x03	; 3
 524:	80 72       	andi	r24, 0x20	; 32
		
		   //should be off
					//lcd_setcursor(8,0);
			//prev_state = ((PIND) & (1<<sensor_pin));		//lcd_bit(prev_state);
					//int x=0;
		while(IS_SET(reset_sinput_pinport,sensor_pin))
 526:	e6 cf       	rjmp	.-52     	; 0x4f4 <main+0x80>
		    }
			else
		    {  
				//lcd_print2line("break");
				//_delay_ms(100);
				prev_state = ((reset_sinput_pinport) & (1<<sensor_pin));
 528:	83 b1       	in	r24, 0x03	; 3
 52a:	80 72       	andi	r24, 0x20	; 32
				//lcd_setcursor(8,0);
				//lcd_bit(prev_state);
				//_delay_ms(1000);
				break;
 52c:	e3 cf       	rjmp	.-58     	; 0x4f4 <main+0x80>

0000052e <__divmodhi4>:
 52e:	97 fb       	bst	r25, 7
 530:	07 2e       	mov	r0, r23
 532:	16 f4       	brtc	.+4      	; 0x538 <__divmodhi4+0xa>
 534:	00 94       	com	r0
 536:	06 d0       	rcall	.+12     	; 0x544 <__divmodhi4_neg1>
 538:	77 fd       	sbrc	r23, 7
 53a:	08 d0       	rcall	.+16     	; 0x54c <__divmodhi4_neg2>
 53c:	0b d0       	rcall	.+22     	; 0x554 <__udivmodhi4>
 53e:	07 fc       	sbrc	r0, 7
 540:	05 d0       	rcall	.+10     	; 0x54c <__divmodhi4_neg2>
 542:	3e f4       	brtc	.+14     	; 0x552 <__divmodhi4_exit>

00000544 <__divmodhi4_neg1>:
 544:	90 95       	com	r25
 546:	81 95       	neg	r24
 548:	9f 4f       	sbci	r25, 0xFF	; 255
 54a:	08 95       	ret

0000054c <__divmodhi4_neg2>:
 54c:	70 95       	com	r23
 54e:	61 95       	neg	r22
 550:	7f 4f       	sbci	r23, 0xFF	; 255

00000552 <__divmodhi4_exit>:
 552:	08 95       	ret

00000554 <__udivmodhi4>:
 554:	aa 1b       	sub	r26, r26
 556:	bb 1b       	sub	r27, r27
 558:	51 e1       	ldi	r21, 0x11	; 17
 55a:	07 c0       	rjmp	.+14     	; 0x56a <__udivmodhi4_ep>

0000055c <__udivmodhi4_loop>:
 55c:	aa 1f       	adc	r26, r26
 55e:	bb 1f       	adc	r27, r27
 560:	a6 17       	cp	r26, r22
 562:	b7 07       	cpc	r27, r23
 564:	10 f0       	brcs	.+4      	; 0x56a <__udivmodhi4_ep>
 566:	a6 1b       	sub	r26, r22
 568:	b7 0b       	sbc	r27, r23

0000056a <__udivmodhi4_ep>:
 56a:	88 1f       	adc	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	5a 95       	dec	r21
 570:	a9 f7       	brne	.-22     	; 0x55c <__udivmodhi4_loop>
 572:	80 95       	com	r24
 574:	90 95       	com	r25
 576:	bc 01       	movw	r22, r24
 578:	cd 01       	movw	r24, r26
 57a:	08 95       	ret

0000057c <_exit>:
 57c:	f8 94       	cli

0000057e <__stop_program>:
 57e:	ff cf       	rjmp	.-2      	; 0x57e <__stop_program>
